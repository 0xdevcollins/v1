name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  NODE_VERSION: "18.17.1"
  PM2_PROCESS_NAME: "dashboard"

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm cache clean --force
          npm cache verify
          npm set registry https://registry.npmjs.org/
          npm config set fetch-retry-maxtimeout 600000
          npm install --legacy-peer-deps || npm install --no-optional || npm install

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm cache clean --force
          npm cache verify
          npm set registry https://registry.npmjs.org/
          npm config set fetch-retry-maxtimeout 600000
          npm install --legacy-peer-deps || npm install --no-optional || npm install

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: |
            .next
            public
            package.json
            package-lock.json

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            echo "Starting deployment..."
            
            DEPLOY_DIR="/home/${{ secrets.SERVER_USER }}/public_html"
            BACKUP_DIR="/home/${{ secrets.SERVER_USER }}/backups"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            mkdir -p $DEPLOY_DIR $BACKUP_DIR
            cd $DEPLOY_DIR
            
            if [ -d ".next" ]; then
              echo "Backing up current version..."
              tar -czf $BACKUP_DIR/backup_$TIMESTAMP.tar.gz .next public package.json package-lock.json
            fi
            
            echo "Fetching latest changes..."
            git init || true
            git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git || true
            git fetch origin main
            git reset --hard origin/main
            
            echo "Installing dependencies..."
            npm cache clean --force
            npm install --legacy-peer-deps || npm install --no-optional || npm install
            
            echo "Building application..."
            npm run build
            
            echo "Configuring PM2..."
            npm install -g pm2 || true
            pm2 reload ${{ env.PM2_PROCESS_NAME }} || pm2 start npm --name "${{ env.PM2_PROCESS_NAME }}" -- start
            pm2 save
            
            echo "Deployment completed successfully!"
