name: Deploy to Contabo VPS

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "Cleaning npm cache..."
          npm cache clean --force
          echo "Installing dependencies with legacy peer deps..."
          npm install --legacy-peer-deps || npm install --no-optional || npm install
          
      - name: Build application
        run: npm run build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H vmi2322505.contaboserver.net >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: 213.199.61.72
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            echo "Starting deployment..."
            
            # Create deployment directory if it doesn't exist
            DEPLOY_DIR="/home/${{ secrets.SERVER_USER }}/public_html"
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR

            # Setup or update git repository
            if [ ! -d ".git" ]; then
                git init
                git remote add origin https://x-access-token:${{ secrets.SECRET_PAT }}@github.com/gridape/v1.git
            fi
            
            # Fetch latest changes
            git fetch origin main
            git reset --hard origin/main

            # Clear npm cache and node_modules
            echo "Cleaning up..."
            npm cache clean --force
            rm -rf node_modules package-lock.json

            # Install dependencies with fallbacks
            echo "Installing dependencies..."
            npm install --legacy-peer-deps || npm install --no-optional || npm install

            # Build application
            echo "Building application..."
            npm run build

            # Backup and cleanup
            if [ -d ".next" ]; then
              rm -rf .next-backup
              mv .next .next-backup
            fi

            # PM2 process management
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi

            # Update PM2 process
            if pm2 list | grep -q "landing-page"; then
              echo "Restarting PM2 process..."
              pm2 restart landing-page
            else
              echo "Starting new PM2 process..."
              pm2 start npm --name "landing-page" -- start
            fi

            pm2 save

            echo "Deployment completed successfully."

